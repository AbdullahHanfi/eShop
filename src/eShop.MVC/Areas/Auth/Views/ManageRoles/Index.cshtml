@model IEnumerable<eShop.BLL.ViewModels.Account.AccountViewModel>
@{
    ViewData["Title"] = "User & Role Management";
}

@if (!Model.Any())
{
    <div class="card shadow-sm border-0">
        <div class="card-body">
            <div class="empty-state">
                <i class="fas fa-users-slash"></i>
                <h4>No Users Found</h4>
                <p>There are no users to display based on your current filters.</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <!-- Header Section -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="display-6 mb-1">
                            <i class="fas fa-users-cog me-2"></i>User Management
                        </h1>
                        <p class="text-muted mb-0">Manage user accounts and their roles</p>
                    </div>
                    <div>
                    </div>
                </div>

                <!-- Role Filter Section -->
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <label class="form-label text-muted small">Filter by Role:</label>
                                <select id="roleFilter" class="form-select" onchange="filterByRole()">
                                    <option value="">All Users</option>
                                    <!-- Roles will be populated dynamically -->
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label text-muted small">Search Users:</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-white border-end-0">
                                        <i class="fas fa-search text-muted"></i>
                                    </span>
                                    <input type="text" id="searchInput" class="form-control border-start-0"
                                           placeholder="Search by name or email..." onkeyup="searchUsers()">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Users Table -->
                <div class="card shadow-sm border-0">
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" id="usersTable">
                                <thead class="bg-light">
                                    <tr>
                                        <th class="border-0 ps-4">User</th>
                                        <th class="border-0">Email</th>
                                        <th class="border-0">Username</th>
                                        <th class="border-0">Roles</th>
                                        <th class="border-0 text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in Model)
                                    {
                                        <tr data-user-id="@user.Id">
                                            <td class="ps-4">
                                                <div class="d-flex align-items-center">
                                                    @if (user.ProfilePicture is not null)
                                                    {
                                                        <img src="data:image/*;base64,@Convert.ToBase64String(user.ProfilePicture)" alt="Profile"
                                                             class="rounded-circle me-3"
                                                             style="width: 40px; height: 40px; object-fit: cover;">
                                                    }
                                                    else
                                                    {
                                                        <img src="~/assets/DefualtPicture.jpg" alt="Profile"
                                                             class="rounded-circle me-3"
                                                             style="width: 40px; height: 40px; object-fit: cover;">
                                                    }
                                                    <div>
                                                        <div class="fw-semibold">@user.UserName</div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="align-middle">@user.Email</td>
                                            <td class="align-middle">@user.UserName</td>
                                            <td class="align-middle">
                                                <div id="userRoles-@user.Id">
                                                    <!-- Roles will be loaded dynamically -->
                                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                        <span class="visually-hidden">Loading...</span>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="align-middle text-center">
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            onclick="manageUserRoles('@user.Id', '@user.UserName')"
                                                            title="Manage Roles">
                                                        <i class="fas fa-user-tag"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            onclick="deleteUser('@user.Id', '@user.UserName')"
                                                            title="Delete User">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Role Management Modal -->
    <div class="modal fade" id="roleManagementModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title">
                        <i class="fas fa-user-shield me-2"></i>Manage Roles for <span id="modalUserName"></span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="modalUserId" />

                    <!-- Current Roles -->
                    <div class="mb-4">
                        <h6 class="text-muted mb-3">Current Roles</h6>
                        <div id="currentRolesList" class="d-flex flex-wrap gap-2">
                            <!-- Current roles will be populated here -->
                        </div>
                    </div>

                    <!-- Add New Role -->
                    <div class="card bg-light border-0">
                        <div class="card-body">
                            <h6 class="mb-3">Add New Role</h6>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label small text-muted">Select Role</label>
                                    <select id="newRoleSelect" class="form-select">
                                        <option value="">Choose a role...</option>
                                        <!-- Roles will be populated dynamically -->
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label small text-muted">Duration (Optional)</label>
                                    <div class="input-group">
                                        <input type="datetime-local" id="roleExpiration" class="form-control">
                                        <button class="btn btn-outline-secondary" type="button"
                                                onclick="document.getElementById('roleExpiration').value = ''"
                                                title="Clear date">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <small class="text-muted">Leave empty for permanent role</small>
                                </div>
                                <div class="col-12">
                                    <button class="btn btn-primary" onclick="addRoleToUser()">
                                        <i class="fas fa-plus me-2"></i>Add Role
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section style {
    <link rel="stylesheet" href="~/css/Auth/IndexRole.css" asp-append-version="true" />
}
@section Scripts {
    <script>
    // Global variables
    let allRoles = [];
    let userRolesMap = new Map();
    let cachedUsers = new Map(); // Cache for API responses
    let currentUsers = []; // Currently displayed users
    let cacheTimeout = 5 * 60 * 1000; // 5 minutes cache timeout

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        loadAllRoles();
        loadUserRoles();
        // Cache initial users data
        cacheInitialUsers();
        addRefreshButton();
    });

    // Cache initial users from the server-rendered data
    function cacheInitialUsers() {
        const userRows = document.querySelectorAll('[data-user-id]');
        const initialUsers = [];
        
        userRows.forEach(row => {
            const userId = row.getAttribute('data-user-id');
            const email = row.querySelector('td:nth-child(2)').textContent.trim();
            const username = row.querySelector('td:nth-child(3)').textContent.trim();
            const profileImg = row.querySelector('img').src;
            
            initialUsers.push({
                id: userId,
                email: email,
                userName: username,
                profilePicture: profileImg.includes('base64') ? profileImg.split(',')[1] : null
            });
        });
        
        currentUsers = initialUsers;
        // Cache with 'all' key for all users
        cachedUsers.set('all', {
            data: initialUsers,
            timestamp: Date.now()
        });
    }

    // Load all available roles
    async function loadAllRoles() {
        try {
            const response = await fetch('/api/roles');
            if (response.ok) {
                allRoles = await response.json();
                populateRoleFilters();
            }
        } catch (error) {
            console.error('Error loading roles:', error);
        }
    }

    // Load user roles for all displayed users
    async function loadUserRoles() {
        const userRows = document.querySelectorAll('[data-user-id]');

        for (const row of userRows) {
            const userId = row.getAttribute('data-user-id');
            try {
                const response = await fetch(`/api/roles/${userId}`);
                if (response.ok) {
                    const roles = await response.json();
                    userRolesMap.set(userId, roles);
                    displayUserRoles(userId, roles);
                }
            } catch (error) {
                console.error(`Error loading roles for user ${userId}:`, error);
            }
        }
    }

    // Check if cache is valid
    function isCacheValid(cacheKey) {
        const cached = cachedUsers.get(cacheKey);
        if (!cached) return false;
        
        return (Date.now() - cached.timestamp) < cacheTimeout;
    }

    // Fetch users by role with caching
    async function fetchUsersByRole(roleId = '') {
        const cacheKey = roleId || 'all';
        
        // Check cache first
        if (isCacheValid(cacheKey)) {
            console.log('Using cached data for role:', cacheKey);
            return cachedUsers.get(cacheKey).data;
        }
        
        showLoading(true);
        
        try {
            let url = '/api/search-users-by-roles';
            if (roleId) {
                url += `?role=${roleId}`;
            }
            
            const response = await fetch(url);
            if (response.ok) {
                const users = await response.json();
                
                // Cache the response
                cachedUsers.set(cacheKey, {
                    data: users,
                    timestamp: Date.now()
                });
                
                console.log('Fetched and cached data for role:', cacheKey);
                return users;
            } else {
                throw new Error('Failed to fetch users');
            }
        } catch (error) {
            console.error('Error fetching users:', error);
            showToast('Error loading users', 'error');
            return [];
        } finally {
            showLoading(false);
        }
    }

    // Update the users table with new data
    function updateUsersTable(users) {
        const tbody = document.querySelector('#usersTable tbody');
        
        if (users.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="text-muted">
                            <i class="fas fa-users-slash fa-2x mb-3"></i>
                            <p>No users found matching the selected criteria.</p>
                        </div>
                    </td>
                </tr>
            `;
            return;
        }
        
        tbody.innerHTML = users.map(user => `
            <tr data-user-id="${user.id}">
                <td class="ps-4">
                    <div class="d-flex align-items-center">
                        ${user.profilePicture 
                            ? `<img src="data:image/*;base64,${user.profilePicture}" alt="Profile" class="rounded-circle me-3" style="width: 40px; height: 40px; object-fit: cover;">`
                            : `<img src="/assets/DefualtPicture.jpg" alt="Profile" class="rounded-circle me-3" style="width: 40px; height: 40px; object-fit: cover;">`
                        }
                        <div>
                            <div class="fw-semibold">${user.userName}</div>
                        </div>
                    </div>
                </td>
                <td class="align-middle">${user.email}</td>
                <td class="align-middle">${user.userName}</td>
                <td class="align-middle">
                    <div id="userRoles-${user.id}">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </td>
                <td class="align-middle text-center">
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary"
                                onclick="manageUserRoles('${user.id}', '${user.userName}')"
                                title="Manage Roles">
                            <i class="fas fa-user-tag"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                onclick="deleteUser('${user.id}', '${user.userName}')"
                                title="Delete User">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
        
        currentUsers = users;
        
        // Load roles for the new users
        setTimeout(() => {
            loadUserRoles();
        }, 100);
    }

    // Display user roles in the table
    function displayUserRoles(userId, roles) {
        const container = document.getElementById(`userRoles-${userId}`);
        if (!container) return;

        if (roles.length === 0) {
            container.innerHTML = '<span class="text-muted">No roles assigned</span>';
            return;
        }

        container.innerHTML = roles.map(role =>
            `<span class="role-badge me-1">${role.name}</span>`
        ).join('');
    }

    // Populate role filters
    function populateRoleFilters() {
        const roleFilter = document.getElementById('roleFilter');
        const newRoleSelect = document.getElementById('newRoleSelect');

        // Populate filter dropdown
        roleFilter.innerHTML = '<option value="">All Users</option>';
        allRoles.forEach(role => {
            roleFilter.innerHTML += `<option value="${role.id}">${role.name}</option>`;
        });
        
        // Populate new role select
        newRoleSelect.innerHTML = '<option value="">Choose a role...</option>';
        allRoles.forEach(role => {
            newRoleSelect.innerHTML += `<option value="${role.id}">${role.name}</option>`;
        });
    }

    // Filter by role - Updated to use AJAX
    async function filterByRole() {
        const roleId = document.getElementById('roleFilter').value;
        
        try {
            const users = await fetchUsersByRole(roleId);
            updateUsersTable(users);
            
            // Clear search input when filtering
            document.getElementById('searchInput').value = '';
            
            showToast(`Loaded ${users.length} user(s)`, 'success');
        } catch (error) {
            console.error('Error filtering by role:', error);
            showToast('Error filtering users', 'error');
        }
    }

    // Search users - Updated to work with current data
    function searchUsers() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        
        if (!searchTerm) {
            // If search is empty, show all current users
            const rows = document.querySelectorAll('#usersTable tbody tr');
            rows.forEach(row => row.style.display = '');
            return;
        }
        
        const rows = document.querySelectorAll('#usersTable tbody tr');
        let visibleCount = 0;
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            const isVisible = text.includes(searchTerm);
            row.style.display = isVisible ? '' : 'none';
            if (isVisible) visibleCount++;
        });
        
        // Optional: Show a message if no results
        if (visibleCount === 0 && searchTerm) {
            console.log('No users match the search criteria');
        }
    }

    // Clear cache function (useful for refreshing data)
    function clearCache() {
        cachedUsers.clear();
        showToast('Cache cleared', 'info');
    }

    // Refresh users data (force reload from server)
    async function refreshUsers() {
        const roleFilter = document.getElementById('roleFilter');
        const currentRoleId = roleFilter.value;
        
        // Clear cache for current filter
        const cacheKey = currentRoleId || 'all';
        cachedUsers.delete(cacheKey);
        
        // Reload data
        await filterByRole();
        showToast('Users data refreshed', 'success');
    }

    // Add refresh button functionality if you want to add it to the UI
    function addRefreshButton() {
        const headerDiv = document.querySelector('.d-flex.justify-content-between.align-items-center.mb-4 > div:last-child');
        if (headerDiv) {
            const refreshBtn = document.createElement('button');
            refreshBtn.className = 'btn btn-outline-secondary me-2';
            refreshBtn.innerHTML = '<i class="fas fa-sync-alt me-2"></i>Refresh';
            refreshBtn.onclick = refreshUsers;
            
            headerDiv.insertBefore(refreshBtn, headerDiv.firstChild);
        }
    }
    
    // Manage user roles
    async function manageUserRoles(userId, userName) {
        document.getElementById('modalUserId').value = userId;
        document.getElementById('modalUserName').textContent = userName;

        // Load current roles
        await loadCurrentRoles(userId);

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('roleManagementModal'));
        modal.show();
    }

    // Load current roles for modal
    async function loadCurrentRoles(userId) {
        const container = document.getElementById('currentRolesList');
        container.innerHTML = '<div class="spinner-border spinner-border-sm" role="status"></div>';

        try {
            const response = await fetch(`/api/roles/${userId}`);
            if (response.ok) {
                const roles = await response.json();
                displayCurrentRoles(roles, userId);
            }
        } catch (error) {
            console.error('Error loading current roles:', error);
            container.innerHTML = '<span class="text-danger">Error loading roles</span>';
        }
    }

    // Display current roles in modal
    function displayCurrentRoles(roles, userId) {
        const container = document.getElementById('currentRolesList');

        if (roles.length === 0) {
            container.innerHTML = '<span class="text-muted">No roles assigned</span>';
            return;
        }

        container.innerHTML = roles.map(role => `
            <span class="role-badge">
                ${role.name}
                ${role.expiresAt ? `<small class="text-muted ms-2">(expires ${new Date(role.expiresAt).toLocaleDateString()})</small>` : ''}
                <i class="fas fa-times remove-role" onclick="removeRole('${userId}', '${role.id}', '${role.name}')"></i>
            </span>
        `).join('');
    }

    // Add role to user
    async function addRoleToUser() {
        const userId = document.getElementById('modalUserId').value;
        const roleId = document.getElementById('newRoleSelect').value;
        const expiration = document.getElementById('roleExpiration').value;

        if (!roleId) {
            showToast('Please select a role', 'warning');
            return;
        }

        showLoading(true);

        try {
            let url = `/api/addrole?Id=${userId}&role=${roleId}`;

            if (expiration) {
                const expirationDate = new Date(expiration);
                url = `/api/add-role-temporarily?Id=${userId}&role=${roleId}&time=${expirationDate.toISOString()}`;
            }

            const response = await fetch(url);

            if (response.ok) {
                showToast('Role added successfully', 'success');
                await loadCurrentRoles(userId);
                await loadUserRoles(); // Refresh the main table
                document.getElementById('newRoleSelect').value = '';
                document.getElementById('roleExpiration').value = '';
                
                // Clear cache to ensure fresh data on next filter
                clearCache();
            } else {
                const error = await response.text();
                showToast(error || 'Failed to add role', 'error');
            }
        } catch (error) {
            console.error('Error adding role:', error);
            showToast('Error adding role', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Remove role from user
    async function removeRole(userId, roleId, roleName) {
        const result = await Swal.fire({
            title: 'Remove Role?',
            text: `Are you sure you want to remove the "${roleName}" role from this user?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, remove it!'
        });

        if (!result.isConfirmed) return;

        showLoading(true);

        try {
            const response = await fetch(`/api/revoke-role?id=${userId}&role=${roleId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                showToast('Role removed successfully', 'success');
                await loadCurrentRoles(userId);
                await loadUserRoles(); // Refresh the main table
                
                // Clear cache to ensure fresh data on next filter
                clearCache();
            } else {
                showToast('Failed to remove role', 'error');
            }
        } catch (error) {
            console.error('Error removing role:', error);
            showToast('Error removing role', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Delete user
    async function deleteUser(userId, userName) {
        const result = await Swal.fire({
            title: 'Delete User?',
            text: `Are you sure you want to delete "${userName}"? This action cannot be undone.`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete!'
        });

        if (!result.isConfirmed) return;

        showLoading(true);

        try {
            const response = await fetch(`/Account/Delete/${userId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                showToast('User deleted successfully', 'success');
                // Remove the row from table
                document.querySelector(`[data-user-id="${userId}"]`).remove();
                
                // Update current users array
                currentUsers = currentUsers.filter(user => user.id !== userId);
                
                // Clear cache to ensure fresh data
                clearCache();
            } else {
                showToast('Failed to delete user', 'error');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            showToast('Error deleting user', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Show loading overlay
    function showLoading(show) {
        let overlay = document.querySelector('.loading-overlay');

        if (!overlay) {
            overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Processing...</p>
                </div>
            `;
            document.body.appendChild(overlay);
        }

        if (show) {
            overlay.classList.add('show');
        } else {
            overlay.classList.remove('show');
        }
    }

    // Show toast notification
    function showToast(message, type = 'info') {
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        });

        Toast.fire({
            icon: type,
            title: message
        });
    }
    </script>
}
